// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/microsoft/azure-devops-go-api/azuredevops/v6/audit (interfaces: Client)

// Package azdosdkmocks is a generated GoMock package.
package azdosdkmocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	audit "github.com/microsoft/azure-devops-go-api/azuredevops/v6/audit"
)

// MockAuditClient is a mock of Client interface.
type MockAuditClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuditClientMockRecorder
}

// MockAuditClientMockRecorder is the mock recorder for MockAuditClient.
type MockAuditClientMockRecorder struct {
	mock *MockAuditClient
}

// NewMockAuditClient creates a new mock instance.
func NewMockAuditClient(ctrl *gomock.Controller) *MockAuditClient {
	mock := &MockAuditClient{ctrl: ctrl}
	mock.recorder = &MockAuditClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditClient) EXPECT() *MockAuditClientMockRecorder {
	return m.recorder
}

// CreateStream mocks base method.
func (m *MockAuditClient) CreateStream(arg0 context.Context, arg1 audit.CreateStreamArgs) (*audit.AuditStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", arg0, arg1)
	ret0, _ := ret[0].(*audit.AuditStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockAuditClientMockRecorder) CreateStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockAuditClient)(nil).CreateStream), arg0, arg1)
}

// DeleteStream mocks base method.
func (m *MockAuditClient) DeleteStream(arg0 context.Context, arg1 audit.DeleteStreamArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStream indicates an expected call of DeleteStream.
func (mr *MockAuditClientMockRecorder) DeleteStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStream", reflect.TypeOf((*MockAuditClient)(nil).DeleteStream), arg0, arg1)
}

// DownloadLog mocks base method.
func (m *MockAuditClient) DownloadLog(arg0 context.Context, arg1 audit.DownloadLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadLog", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadLog indicates an expected call of DownloadLog.
func (mr *MockAuditClientMockRecorder) DownloadLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadLog", reflect.TypeOf((*MockAuditClient)(nil).DownloadLog), arg0, arg1)
}

// GetActions mocks base method.
func (m *MockAuditClient) GetActions(arg0 context.Context, arg1 audit.GetActionsArgs) (*[]audit.AuditActionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActions", arg0, arg1)
	ret0, _ := ret[0].(*[]audit.AuditActionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActions indicates an expected call of GetActions.
func (mr *MockAuditClientMockRecorder) GetActions(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActions", reflect.TypeOf((*MockAuditClient)(nil).GetActions), arg0, arg1)
}

// QueryAllStreams mocks base method.
func (m *MockAuditClient) QueryAllStreams(arg0 context.Context, arg1 audit.QueryAllStreamsArgs) (*[]audit.AuditStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStreams", arg0, arg1)
	ret0, _ := ret[0].(*[]audit.AuditStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStreams indicates an expected call of QueryAllStreams.
func (mr *MockAuditClientMockRecorder) QueryAllStreams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStreams", reflect.TypeOf((*MockAuditClient)(nil).QueryAllStreams), arg0, arg1)
}

// QueryLog mocks base method.
func (m *MockAuditClient) QueryLog(arg0 context.Context, arg1 audit.QueryLogArgs) (*audit.AuditLogQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLog", arg0, arg1)
	ret0, _ := ret[0].(*audit.AuditLogQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLog indicates an expected call of QueryLog.
func (mr *MockAuditClientMockRecorder) QueryLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLog", reflect.TypeOf((*MockAuditClient)(nil).QueryLog), arg0, arg1)
}

// QueryStreamById mocks base method.
func (m *MockAuditClient) QueryStreamById(arg0 context.Context, arg1 audit.QueryStreamByIdArgs) (*audit.AuditStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryStreamById", arg0, arg1)
	ret0, _ := ret[0].(*audit.AuditStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryStreamById indicates an expected call of QueryStreamById.
func (mr *MockAuditClientMockRecorder) QueryStreamById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryStreamById", reflect.TypeOf((*MockAuditClient)(nil).QueryStreamById), arg0, arg1)
}

// UpdateStatus mocks base method.
func (m *MockAuditClient) UpdateStatus(arg0 context.Context, arg1 audit.UpdateStatusArgs) (*audit.AuditStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1)
	ret0, _ := ret[0].(*audit.AuditStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockAuditClientMockRecorder) UpdateStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockAuditClient)(nil).UpdateStatus), arg0, arg1)
}

// UpdateStream mocks base method.
func (m *MockAuditClient) UpdateStream(arg0 context.Context, arg1 audit.UpdateStreamArgs) (*audit.AuditStream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStream", arg0, arg1)
	ret0, _ := ret[0].(*audit.AuditStream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStream indicates an expected call of UpdateStream.
func (mr *MockAuditClientMockRecorder) UpdateStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStream", reflect.TypeOf((*MockAuditClient)(nil).UpdateStream), arg0, arg1)
}
